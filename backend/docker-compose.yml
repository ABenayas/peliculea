services:
  # Servicio de base de datos PostgreSQL.
  nestjs-database:
    container_name: nestjs-database
    image: postgres:16.2-alpine3.19
    volumes:
      - ./database/db-data:/var/lib/postgresql/data # Guarda los datos de forma persistente.
    ports:
      - '5432:5432' # Puerto local:puerto del contenedor.
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data
    healthcheck: # Esperamos a que la DB esté lista.
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 2s
      timeout: 1s
      retries: 20
    restart: always

  #Adminer (GUI para ver la base de datos).
  adminer:
    container_name: adminer
    image: adminer
    restart: always
    ports:
      - '8080:8080' # Entra en localhost:8080
    environment:
      ADMINER_DEFAULT_SERVER: nestjs-database

  nestjs-app:
    container_name: nestjs-app
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./dist:/usr/src/app/dist:delegated
      - ./src:/usr/src/app/src:delegated
      - ./libs:/usr/src/app/libs:delegated
      - ./package.json:/usr/src/app/package.json
      - ./tsconfig.json:/usr/src/app/tsconfig.json
      - ./tsconfig.build.json:/usr/src/app/tsconfig.build.json
    env_file: # Carga automáticamente las variables de .env
      - .env
    environment:
      PGSTRING: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TMDB_API_TOKEN: ${TMDB_API_TOKEN}
    ports:
      - '3000:3000' # API disponible en localhost:3000
    depends_on:
      nestjs-database:
        condition: service_healthy # Espera a que la base de datos esté disponible.
